#!/usr/bin/env python3

# This is socket listening version based on asyncore.dispatcher.
# Requires login command to be sent with first request.

import os
import sys
import json
import time
import socket
import asyncore
from pprint import pprint

from heppy import Net
from heppy.EPP import REPP
from heppy.Client import Client
from heppy.Config import Config

SIZE = 4096

def d(a):
    pprint(a)
    exit(1)

class AsyncServer(asyncore.dispatcher):
    def __init__(self, config, epp):
        self.epp = epp
        self.handler = None
        asyncore.dispatcher.__init__(self)
        address = config['address']
        if isinstance(address, basestring):
            AsyncServer.check_connection(config)
            if os.path.exists(address):
                os.unlink(address)
            family = socket.AF_UNIX
        else:
            family = socket.AF_INET
            address = tuple(address)
        self.create_socket(family, socket.SOCK_STREAM)
        self.bind(address)
        self.listen(5)
        return

    @staticmethod
    def check_connection(config):
        address = config['address']
        if Client.try_connect(address):
            print('{0} already in use'.format(address))
            exit(1)

    def handle_accept(self):
        socket, address = self.accept()
        # We only want to deal with one client at a time
        if self.handler:
            socket.close()
            socket = None
        else:
            self.handler = Handler(socket, self)

    def handle_close(self):
        self.handler = None

class Handler(asyncore.dispatcher):
    def __init__(self, socket, server):
        self.server  = server
        self.epp     = server.epp
        self.query   = ''
        self.answer  = ''
        self.length  = None
        self.wait_till = 0

        # Start reading
        self.is_reading = True

        # Create ourselves, but with an already provided socket
        asyncore.dispatcher.__init__(self, socket)

    def readable(self):
        return self.is_ready() and self.is_reading

    def writable(self):
        return self.is_ready() and not self.is_reading

    def is_ready(self):
        return time.time()>self.wait_till

    def wait(self, seconds):
        self.wait_till = time.time() + seconds

    def handle_read(self):
        if self.length is None:
            net = self.recv(4)
            self.length = Net.int_from_net(net)-4
        else:
            self.query += self.recv(SIZE)
        if len(self.query)>=self.length:
            self.is_reading = False
            self.answer = self.command(self.query)
            self.length = None

    def handle_write(self):
        if self.length is None:
            self.length = len(self.answer) + 4
            self.send(Net.int_to_net(self.length))
        elif len(self.answer) > 0:
            sent = self.send(self.answer)
            self.answer = self.answer[sent:]
        else:
            self.handle_close()

    def command(self, cmd):
        cmd = cmd.strip()
        if cmd == 'greeting':
            return self.epp.greeting
        elif cmd == 'info':
            return json.dumps(self.epp.config, indent=4)
        elif cmd.startswith('wait'):
            try:
                sec = float(cmd[4:])
            except:
                sec = 1
            self.wait(sec)
            return 'waited {0} seconds'.format(sec)
        elif cmd.startswith('<?xml '):
            return self.epp.request(cmd)
        else:
            return 'Error: wrong command: ' + cmd

    def handle_close(self):
        self.close()
        self.server.handler = None

if len(sys.argv)<2:
    print('usage: eppyd config.json')
    exit(1)
config = Config(sys.argv[1])

AsyncServer.check_connection(config['local'])

epp    = REPP(config)
server = AsyncServer(config['local'], epp)

asyncore.loop()

